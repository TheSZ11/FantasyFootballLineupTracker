name: Update Dashboard Data

on:
  schedule:
    # Run every Thursday at 8:00 AM UTC (adjust for your timezone)
    - cron: '0 8 * * 4'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      force_update:
        description: 'Force update even if recent data exists'
        required: false
        default: false
        type: boolean

permissions:
  contents: write  # Need write permission to commit data back

concurrency:
  group: "data-update"
  cancel-in-progress: false

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Need full history for proper git operations
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check if data update needed
      id: check_update
      run: |
        # Check if we should skip update (data less than 6 hours old, unless forced)
        if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
          echo "Force update requested, proceeding..."
          echo "should_update=true" >> $GITHUB_OUTPUT
        elif [ -f "dashboard/public/data/metadata.json" ]; then
          # Check last update time
          last_update=$(python3 -c "
          import json, datetime
          try:
              with open('dashboard/public/data/metadata.json') as f:
                  data = json.load(f)
              last_update = datetime.datetime.fromisoformat(data['generated_at'].replace('Z', '+00:00'))
              now = datetime.datetime.now(datetime.timezone.utc)
              hours_diff = (now - last_update).total_seconds() / 3600
              print(f'Hours since last update: {hours_diff:.1f}')
              # Update if data is older than 6 hours
              if hours_diff > 6:
                  print('true')
              else:
                  print('false')
          except:
              print('true')  # Update if we can't determine last update time
          ")
          echo "should_update=$last_update" >> $GITHUB_OUTPUT
          if [ "$last_update" = "false" ]; then
            echo "Data is recent (less than 6 hours old), skipping update"
          fi
        else
          echo "No existing data found, proceeding with update"
          echo "should_update=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate fresh dashboard data
      if: steps.check_update.outputs.should_update == 'true'
      run: |
        echo "🔄 Generating fresh dashboard data..."
        python -m src.lineup_tracker.async_main export --export-dir dashboard/public/data
        
    - name: Verify data generation
      if: steps.check_update.outputs.should_update == 'true'
      run: |
        echo "🔍 Verifying generated data..."
        
        # Check that required files exist
        required_files=(
          "dashboard/public/data/squad.json"
          "dashboard/public/data/matches.json"
          "dashboard/public/data/gameweek_matches.json"
          "dashboard/public/data/lineup_status.json"
          "dashboard/public/data/metadata.json"
          "dashboard/public/data/status.json"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          else
            echo "✅ $file exists ($(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null) bytes)"
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "❌ Missing required data files:"
          printf '   - %s\n' "${missing_files[@]}"
          exit 1
        fi
        
        # Validate JSON format
        echo "🔍 Validating JSON format..."
        for file in "${required_files[@]}"; do
          if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
            echo "❌ Invalid JSON format in $file"
            exit 1
          fi
        done
        
        echo "✅ All data files validated successfully"
        
    - name: Check for data changes
      if: steps.check_update.outputs.should_update == 'true'
      id: check_changes
      run: |
        # Check if there are actual changes to commit
        git add dashboard/public/data/
        if git diff --staged --quiet; then
          echo "No changes detected in data files"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Data changes detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # Show summary of changes
          echo "📊 Data update summary:"
          git diff --staged --stat dashboard/public/data/
        fi
        
    - name: Commit updated data
      if: steps.check_update.outputs.should_update == 'true' && steps.check_changes.outputs.has_changes == 'true'
      run: |
        # Configure git for the action
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - Data Update"
        
        # Create commit with timestamp and metadata
        commit_timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        # Get some metadata for the commit message
        squad_count=$(python3 -c "
        import json
        try:
            with open('dashboard/public/data/squad.json') as f:
                data = json.load(f)
            print(len(data.get('players', [])))
        except:
            print('unknown')
        ")
        
        matches_count=$(python3 -c "
        import json
        try:
            with open('dashboard/public/data/matches.json') as f:
                data = json.load(f)
            print(len(data.get('matches', [])))
        except:
            print('unknown')
        ")
        
        git commit -m "🤖 Automated data update - $commit_timestamp

        📊 Updated dashboard data:
        - Squad players: $squad_count
        - Today's matches: $matches_count
        - Generated: $commit_timestamp
        
        [skip ci] [automated-update]"
        
    - name: Push changes
      if: steps.check_update.outputs.should_update == 'true' && steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "🚀 Pushing updated data to repository..."
        git push origin main
        
    - name: Trigger dashboard deployment
      if: steps.check_update.outputs.should_update == 'true' && steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "🔄 Triggering dashboard deployment with fresh data..."
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy-dashboard.yml/dispatches \
          -d '{"ref":"main","inputs":{}}'
        
    - name: Summary
      if: always()
      run: |
        echo "📋 Data Update Summary:"
        echo "========================"
        
        if [ "${{ steps.check_update.outputs.should_update }}" = "true" ]; then
          if [ "${{ steps.check_changes.outputs.has_changes }}" = "true" ]; then
            echo "✅ Data successfully updated and committed"
            echo "📊 New data is now available for dashboard deployment"
          else
            echo "ℹ️  Data generation completed but no changes detected"
            echo "📊 Current data is already up to date"
          fi
        else
          echo "⏭️  Data update skipped (recent data exists)"
          echo "💡 Use 'force_update: true' to override this behavior"
        fi
        
        echo ""
        echo "🔗 Next steps:"
        echo "- Dashboard will rebuild automatically on next push to main"
        echo "- Or trigger manual deployment via workflow_dispatch"
