name: Update Dashboard Data

on:
  schedule:
    # Run every Thursday at 8:00 AM UTC (adjust for your timezone)
    - cron: '0 8 * * 4'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      force_update:
        description: 'Force update even if recent data exists'
        required: false
        default: false
        type: boolean

permissions:
  contents: write  # Need write permission to commit data back

concurrency:
  group: "data-update"
  cancel-in-progress: false

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    env:
      # Required Fantrax configuration
      FANTRAX_ENABLED: true
      FANTRAX_LEAGUE_ID: ${{ secrets.FANTRAX_LEAGUE_ID }}
      FANTRAX_TEAM_ID: ${{ secrets.FANTRAX_TEAM_ID }}
      FANTRAX_BASE_URL: https://www.fantrax.com/fxea/general
      FANTRAX_TIMEOUT_SECONDS: 30
      FANTRAX_MAX_RETRIES: 3
      
      # API Configuration
      API_BASE_URL: https://api.sofascore.com
      API_TIMEOUT_SECONDS: 30
      API_MAX_RETRIES: 3
      API_RATE_LIMIT_PER_MINUTE: 60
      
      # Notification settings (disabled for automation)
      EMAIL_ENABLED: false
      DISCORD_ENABLED: false
      SEND_STARTUP_NOTIFICATIONS: false
      SEND_SHUTDOWN_NOTIFICATIONS: false
      SEND_ERROR_NOTIFICATIONS: false
      SEND_CONFIRMATION_ALERTS: false
      LOG_LEVEL: DEBUG
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Need full history for proper git operations
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check if data update needed
      id: check_update
      run: |
        should_update="false"
        
        # Check if force update requested
        if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
          echo "Force update requested, proceeding..."
          should_update="true"
        elif [ ! -f "dashboard/public/data/metadata.json" ]; then
          echo "No existing data found, proceeding with update"
          should_update="true"
        else
          echo "Checking data age..."
          # Simple age check using file modification time (approximate)
          if [ $(find dashboard/public/data/metadata.json -mmin +360 | wc -l) -gt 0 ]; then
            echo "Data is older than 6 hours, updating"
            should_update="true"
          else
            echo "Data is recent (less than 6 hours old), skipping update"
          fi
        fi
        
        echo "should_update=$should_update" >> $GITHUB_OUTPUT
        
    - name: Generate fresh dashboard data
      if: steps.check_update.outputs.should_update == 'true'
      run: |
        echo "🔄 Generating fresh dashboard data..."
        
        # Enhanced connectivity tests
        echo "Testing Fantrax endpoint..."
        curl -s "https://www.fantrax.com/fxea/general/getTeamRosters?leagueId=$FANTRAX_LEAGUE_ID" | head -200 || true
        
        echo "Testing SofaScore API endpoint..."
        today=$(date +%Y-%m-%d)
        curl -s "https://api.sofascore.com/api/v1/sport/football/scheduled-events/$today" | head -500 || true
        
        # Run debug script first
        echo "🔍 Running SofaScore API debug analysis..."
        python scripts/debug_sofascore.py || true
        
        # Generate data with enhanced logging
        export LOG_LEVEL=DEBUG
        python -m src.lineup_tracker.async_main export --debug --export-dir dashboard/public/data
        
    - name: Verify data generation
      if: steps.check_update.outputs.should_update == 'true'
      run: |
        echo "🔍 Verifying generated data..."
        
        # Check that required files exist
        required_files="squad.json matches.json gameweek_matches.json lineup_status.json metadata.json status.json"
        
        for file in $required_files; do
          if [ ! -f "dashboard/public/data/$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            size=$(stat -f%z "dashboard/public/data/$file" 2>/dev/null || stat -c%s "dashboard/public/data/$file" 2>/dev/null)
            echo "✅ $file ($size bytes)"
          fi
        done
        
        # Basic JSON validation
        echo "🔍 Validating JSON format..."
        for file in $required_files; do
          if ! python3 -m json.tool "dashboard/public/data/$file" >/dev/null 2>&1; then
            echo "❌ Invalid JSON format in $file"
            exit 1
          fi
        done
        
        echo "✅ All data files validated successfully"
        
    - name: Check for data changes
      if: steps.check_update.outputs.should_update == 'true'
      id: check_changes
      run: |
        # Check if there are actual changes to commit
        git add dashboard/public/data/
        if git diff --staged --quiet; then
          echo "No changes detected in data files"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Data changes detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # Show summary of changes
          echo "📊 Data update summary:"
          git diff --staged --stat dashboard/public/data/
        fi
        
    - name: Commit updated data
      if: steps.check_update.outputs.should_update == 'true' && steps.check_changes.outputs.has_changes == 'true'
      run: |
        # Configure git for the action
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - Data Update"
        
        # Create commit with timestamp
        commit_timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        # Simple metadata gathering (basic file info)
        squad_size=$(wc -l < dashboard/public/data/squad.json || echo "unknown")
        matches_size=$(wc -l < dashboard/public/data/matches.json || echo "unknown")
        
        git commit -m "🤖 Automated data update - $commit_timestamp" \
                   -m "📊 Updated dashboard data files" \
                   -m "- Generated: $commit_timestamp" \
                   -m "- Squad data: $squad_size lines" \
                   -m "- Matches data: $matches_size lines" \
                   -m "[skip ci] [automated-update]"
        
    - name: Push changes
      if: steps.check_update.outputs.should_update == 'true' && steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "🚀 Pushing updated data to repository..."
        git push origin main
        
    - name: Trigger dashboard deployment
      if: steps.check_update.outputs.should_update == 'true' && steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "🔄 Triggering dashboard deployment with fresh data..."
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy-dashboard.yml/dispatches \
          -d '{"ref":"main","inputs":{}}'
        
    - name: Summary
      if: always()
      run: |
        echo "📋 Data Update Summary:"
        echo "========================"
        
        if [ "${{ steps.check_update.outputs.should_update }}" = "true" ]; then
          if [ "${{ steps.check_changes.outputs.has_changes }}" = "true" ]; then
            echo "✅ Data successfully updated and committed"
            echo "📊 New data is now available for dashboard deployment"
          else
            echo "ℹ️  Data generation completed but no changes detected"
            echo "📊 Current data is already up to date"
          fi
        else
          echo "⏭️  Data update skipped (recent data exists)"
          echo "💡 Use 'force_update: true' to override this behavior"
        fi
        
        echo ""
        echo "🔗 Next steps:"
        echo "- Dashboard will rebuild automatically on next push to main"
        echo "- Or trigger manual deployment via workflow_dispatch"