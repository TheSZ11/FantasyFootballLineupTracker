#!/usr/bin/env python3
"""
LineupTracker Setup Script

This script helps you set up your LineupTracker installation with interactive configuration.
Run this after installing dependencies to get started quickly.

Usage:
    python setup.py
"""

import os
import sys
import shutil
from pathlib import Path
from typing import Optional


def print_header():
    """Print welcome header."""
    print("=" * 60)
    print("üìã LineupTracker Setup Assistant")
    print("=" * 60)
    print()
    print("This script will help you configure LineupTracker for your fantasy team.")
    print("You can re-run this anytime to update your configuration.")
    print()


def check_dependencies():
    """Check if required dependencies are installed."""
    print("üîç Checking dependencies...")
    
    missing_deps = []
    required_packages = [
        'pandas', 'requests', 'python-dotenv', 
        'discord-webhook', 'sofascore-wrapper', 'schedule'
    ]
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"  ‚úÖ {package}")
        except ImportError:
            missing_deps.append(package)
            print(f"  ‚ùå {package}")
    
    if missing_deps:
        print()
        print("‚ùå Missing dependencies detected!")
        print("Please install them first:")
        print(f"pip install {' '.join(missing_deps)}")
        print("\nOr install all dependencies:")
        print("pip install -r requirements.txt")
        return False
    
    print("  ‚úÖ All dependencies found!")
    return True


def create_env_file():
    """Create .env file with user input."""
    print("\nüìù Setting up environment configuration...")
    
    env_path = Path(".env")
    if env_path.exists():
        response = input("  .env file already exists. Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("  Keeping existing .env file.")
            return
    
    # Get user preferences
    print("\n  Let's configure your notification preferences:")
    
    # Discord setup
    use_discord = input("  Do you want Discord notifications? (Y/n): ").strip().lower()
    discord_webhook = ""
    if use_discord != 'n':
        print("\n  üì¢ Discord Setup:")
        print("  1. Go to your Discord server")
        print("  2. Server Settings ‚Üí Integrations ‚Üí Create Webhook")  
        print("  3. Copy the webhook URL")
        discord_webhook = input("  Enter Discord webhook URL (or press Enter to skip): ").strip()
    
    # Email setup
    use_email = input("\n  Do you want email notifications? (y/N): ").strip().lower()
    email_config = {}
    if use_email == 'y':
        print("\n  üìß Email Setup (Gmail recommended):")
        print("  For Gmail:")
        print("  1. Enable 2-Factor Authentication")
        print("  2. Generate App Password: Google Account ‚Üí Security ‚Üí App passwords")
        print("  3. Use the 16-character app password (not your regular password)")
        
        email_config['smtp_server'] = input("  SMTP Server (smtp.gmail.com): ").strip() or "smtp.gmail.com"
        email_config['smtp_port'] = input("  SMTP Port (587): ").strip() or "587"
        email_config['username'] = input("  Email Username: ").strip()
        email_config['password'] = input("  Email Password (App Password): ").strip()
        email_config['recipient'] = input("  Recipient Email: ").strip()
    
    # Squad file setup
    print("\n  üìã Squad Configuration:")
    squad_file = input("  Squad file name (my_roster.csv): ").strip() or "my_roster.csv"
    
    # Monitoring settings
    print("\n  ‚è∞ Monitoring Settings:")
    check_interval = input("  Check interval in minutes (15): ").strip() or "15"
    pre_match_window = input("  Start monitoring X minutes before kickoff (60): ").strip() or "60"
    
    # Create .env content
    env_content = f"""# LineupTracker Configuration
# Generated by setup script

# Environment Settings
ENVIRONMENT=production
LOG_LEVEL=INFO
USER_TIMEZONE=UTC

# Discord Notifications
DISCORD_ENABLED={'true' if discord_webhook else 'false'}
{f'DISCORD_WEBHOOK_URL={discord_webhook}' if discord_webhook else '# DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/...'}

# Email Notifications
EMAIL_ENABLED={'true' if email_config else 'false'}
{f"""EMAIL_SMTP_SERVER={email_config.get('smtp_server', '')}
EMAIL_SMTP_PORT={email_config.get('smtp_port', '')}
EMAIL_USERNAME={email_config.get('username', '')}
EMAIL_PASSWORD={email_config.get('password', '')}
EMAIL_RECIPIENT={email_config.get('recipient', '')}""" if email_config else """# EMAIL_SMTP_SERVER=smtp.gmail.com
# EMAIL_SMTP_PORT=587
# EMAIL_USERNAME=your-email@gmail.com
# EMAIL_PASSWORD=your-app-password
# EMAIL_RECIPIENT=recipient@example.com"""}

# Monitoring Settings
CHECK_INTERVAL_MINUTES={check_interval}
PRE_MATCH_WINDOW_MINUTES={pre_match_window}
SQUAD_FILE_PATH={squad_file}

# Notification Behavior
SEND_STARTUP_NOTIFICATIONS=true
SEND_CONFIRMATION_ALERTS=true
"""
    
    # Write .env file
    with open(".env", "w") as f:
        f.write(env_content)
    
    print(f"  ‚úÖ Created .env file")


def setup_squad_file():
    """Help user set up their squad file."""
    print("\nüìã Setting up squad file...")
    
    # Check if squad file already exists
    squad_file = os.getenv('SQUAD_FILE_PATH', 'my_roster.csv')
    
    if os.path.exists(squad_file):
        print(f"  Squad file '{squad_file}' already exists.")
        response = input("  Do you want to see example formats? (y/N): ").strip().lower()
        if response == 'y':
            show_squad_examples()
        return
    
    print(f"  Squad file '{squad_file}' not found.")
    print("\n  Choose a setup option:")
    print("  1. Copy from Fantrax export (recommended)")
    print("  2. Create simple squad file")
    print("  3. Use example file")
    print("  4. Skip for now")
    
    choice = input("  Enter choice (1-4): ").strip()
    
    if choice == "1":
        setup_fantrax_export()
    elif choice == "2":
        setup_simple_squad()
    elif choice == "3":
        copy_example_squad()
    else:
        print("  Skipping squad setup. You can create it manually later.")


def setup_fantrax_export():
    """Guide user through Fantrax export setup."""
    print("\n  üìä Fantrax Export Setup:")
    print("  1. Log into your Fantrax league")
    print("  2. Go to My Team ‚Üí Roster")
    print("  3. Click 'Export' button")
    print("  4. Save the CSV file as 'my_roster.csv' in this directory")
    print("  5. Set Status to 'Act' for players you expect to start")
    print("     Set Status to 'Res' for bench/rotation players")
    print()
    input("  Press Enter when you've saved your Fantrax export...")
    
    if os.path.exists('my_roster.csv'):
        print("  ‚úÖ Found my_roster.csv file!")
    else:
        print("  ‚ö†Ô∏è  Couldn't find my_roster.csv file.")
        print("     Make sure the file is saved in this directory.")


def setup_simple_squad():
    """Create a simple squad file template."""
    print("\n  üìù Creating simple squad template...")
    
    squad_content = """player_name,team_name,position,currently_starting,notes
# Add your players here. Set currently_starting to true for expected starters.
# Examples:
# Mohamed Salah,Liverpool,Forward,true,Captain choice
# Erling Haaland,Manchester City,Forward,true,Premium striker
# Kevin De Bruyne,Manchester City,Midfielder,false,Rotation risk
"""
    
    with open('my_roster.csv', 'w') as f:
        f.write(squad_content)
    
    print("  ‚úÖ Created simple squad template in my_roster.csv")
    print("  Edit this file to add your actual players.")


def copy_example_squad():
    """Copy example squad file."""
    print("\n  üìã Copying example squad...")
    
    example_path = Path("examples/sample_roster.csv")
    if example_path.exists():
        shutil.copy(example_path, "my_roster.csv")
        print("  ‚úÖ Copied example squad to my_roster.csv")
        print("  Edit this file to match your actual team.")
    else:
        print("  ‚ùå Example file not found. Creating simple template instead.")
        setup_simple_squad()


def show_squad_examples():
    """Show squad file format examples."""
    print("\n  üìã Squad File Format Examples:")
    print("\n  Option 1: Fantrax Export Format")
    print("    - Export your roster from Fantrax")
    print("    - Set 'Status' column: 'Act' for starters, 'Res' for bench")
    print("    - Contains detailed fantasy stats")
    
    print("\n  Option 2: Simple Format")
    print("    player_name,team_name,position,currently_starting,notes")
    print("    Mohamed Salah,Liverpool,Forward,true,Captain choice")
    print("    Kevin De Bruyne,Manchester City,Midfielder,false,Rotation risk")


def test_configuration():
    """Test the configuration."""
    print("\nüß™ Testing configuration...")
    
    try:
        # Try to load environment
        from dotenv import load_dotenv
        load_dotenv()
        print("  ‚úÖ Environment variables loaded")
        
        # Test squad file
        squad_file = os.getenv('SQUAD_FILE_PATH', 'my_roster.csv')
        if os.path.exists(squad_file):
            print(f"  ‚úÖ Squad file found: {squad_file}")
        else:
            print(f"  ‚ö†Ô∏è  Squad file not found: {squad_file}")
        
        # Test Discord webhook
        discord_url = os.getenv('DISCORD_WEBHOOK_URL')
        if discord_url and discord_url.startswith('https://discord.com/api/webhooks/'):
            print("  ‚úÖ Discord webhook URL configured")
        elif os.getenv('DISCORD_ENABLED', 'false').lower() == 'true':
            print("  ‚ö†Ô∏è  Discord enabled but webhook URL missing")
        else:
            print("  ‚ÑπÔ∏è  Discord notifications disabled")
        
        # Test email settings
        if os.getenv('EMAIL_ENABLED', 'false').lower() == 'true':
            required_email_vars = ['EMAIL_SMTP_SERVER', 'EMAIL_USERNAME', 'EMAIL_PASSWORD', 'EMAIL_RECIPIENT']
            if all(os.getenv(var) for var in required_email_vars):
                print("  ‚úÖ Email configuration complete")
            else:
                print("  ‚ö†Ô∏è  Email enabled but configuration incomplete")
        else:
            print("  ‚ÑπÔ∏è  Email notifications disabled")
        
        print("\n  üéâ Configuration test complete!")
        
    except Exception as e:
        print(f"  ‚ùå Configuration test failed: {e}")


def print_next_steps():
    """Print next steps for the user."""
    print("\n" + "=" * 60)
    print("üéâ Setup Complete!")
    print("=" * 60)
    print()
    print("Next steps:")
    print("1. üìã Review/edit your squad file (my_roster.csv)")
    print("2. üß™ Test the system: python test_system.py")
    print("3. üöÄ Start monitoring: python main.py")
    print()
    print("Useful commands:")
    print("‚Ä¢ View logs: tail -f lineup_monitor.log")
    print("‚Ä¢ Test notifications: python -c \"from notifications import NotificationHandler; NotificationHandler().test_notifications()\"")
    print("‚Ä¢ Re-run setup: python setup.py")
    print()
    print("Documentation:")
    print("‚Ä¢ README.md - Full documentation")
    print("‚Ä¢ examples/ - Example configurations")
    print()
    print("Happy monitoring! üìä‚öΩ")


def main():
    """Main setup function."""
    print_header()
    
    # Check dependencies
    if not check_dependencies():
        sys.exit(1)
    
    # Create .env file
    create_env_file()
    
    # Load the new environment
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        print("Warning: Could not load python-dotenv")
    
    # Setup squad file
    setup_squad_file()
    
    # Test configuration
    test_configuration()
    
    # Show next steps
    print_next_steps()


if __name__ == "__main__":
    main()
